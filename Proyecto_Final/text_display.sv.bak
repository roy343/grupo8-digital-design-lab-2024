module text_display (
    input logic clk, rst,
    input logic [9:0] pixel_x, pixel_y,
    output logic pixel,
    input logic video_on
);

    logic [31:0] Address;
    logic [31:0] data;
	 logic [7:0] ch;
    logic [2:0] xoff, yoff;
    logic char_pixel;

	 processorTop proce(
		 .clk(clk),
		 .rst(rst),
		 .address(Address),
		 .ram_data(data)
    );
	 
    chargenrom char_rom (
        .ch(ch),
        .xoff(xoff),
        .yoff(yoff),
        .pixel(char_pixel)
    );

    localparam CHAR_WIDTH = 8;
    localparam CHAR_HEIGHT = 8;
    localparam CHARS_PER_LINE = 80;

    logic [9:0] char_x, char_y;
    logic [31:0] current_word;

    assign char_x = pixel_x / CHAR_WIDTH;
    assign char_y = pixel_y / CHAR_HEIGHT;

    always_ff @(posedge clk or posedge rst) begin
        if (rst) begin
            Address <= 0;
        end else begin
            Address <= (char_y * CHARS_PER_LINE + char_x) / 4;
        end
    end

    always_ff @(posedge clk) begin
        case (char_x % 4)
            2'b00: ch <= Read_data[31:24];
            2'b01: ch <= Read_data[23:16];
            2'b10: ch <= Read_data[15:8];
            2'b11: ch <= Read_data[7:0];
        endcase
    end

    assign xoff = pixel_x % CHAR_WIDTH;
    assign yoff = pixel_y % CHAR_HEIGHT;

    assign pixel = video_on ? char_pixel : 1'b0;

endmodule